{"name":"jInstagram","tagline":"A java wrapper for the instagram api","body":"#jInstagram\r\n[![Build Status](https://travis-ci.org/sachin-handiekar/jInstagram.png)](https://travis-ci.org/sachin-handiekar/jInstagram)\r\n\r\nAn unofficial Java library for the [Instagram API](http://instagram.com/developer/).\r\n\r\nNote : jInstagram uses code from the [scribe-java] (https://github.com/fernandezpablo85/scribe-java) library developed by [Pablo Fernandez] (https://github.com/fernandezpablo85). \r\n\r\n\r\n##Usage\r\n\r\n* Create the InstagramService object\r\n\r\n```java\r\nInstagramService service =\tnew InstagramAuthService()\r\n    \t\t\t\t\t\t\t.apiKey(\"your_client_id\")\r\n    \t\t\t\t\t\t\t.apiSecret(\"your_client_secret\")\r\n    \t\t\t\t\t\t\t.callback(\"your_callback_url\")     \r\n    \t\t\t\t\t\t\t.build();\r\n```    \t\t\t\t\t\t\t\r\n\r\n__[With Scope]__\r\n\r\nNote : Multiple scopes can be provided with a space in between. For ex. ``` .scope(\"likes comments\") ``` Please see [Instagram API](http://instagram.com/developer/authentication/#scope) for more details regarding the supported scopes.\r\n\r\n__Commenting access__ - You need to register your clientId and Application Name on [http://bit.ly/instacomments](http://bit.ly/instacomments), to get access to commenting.\r\n\r\n```java\r\nInstagramService service = new InstagramAuthService()\r\n    \t\t\t\t\t\t\t.apiKey(\"your_client_id\")\r\n    \t\t\t\t\t\t\t.apiSecret(\"your_client_secret\")\r\n    \t\t\t\t\t\t\t.callback(\"your_callback_url\") \r\n    \t\t\t\t\t\t\t.scope(\"comments\")\r\n    \t\t\t\t\t\t\t.build();\r\n``` \r\n\r\nNote : An empty token can be define as follows -\r\n\r\n```java\r\nprivate static final Token EMPTY_TOKEN = null;\r\n```\r\n\r\n* Validate your user against Instagram\r\n\r\n```java\r\nString authorizationUrl = service.getAuthorizationUrl(EMPTY_TOKEN);\r\n```\r\n\r\n* Getting the Access Token \r\n\r\n```java\r\nVerifier verifier = new Verifier(\"verifier you get from the user\");\r\nToken accessToken = service.getAccessToken(EMPTY_TOKEN, verifier);\r\n ```\r\n \r\n* Creating the Instagram Object\r\n\r\n```java\r\nInstagram instagram = new Instagram(accessToken);\r\n```\r\n\r\n* Or Creating the Instagram Object with enforce signed header (Note: Enforce signed header of the APP settings should be checked)\r\n\r\n```java\r\n// 1. your_client_secret: do not use accessToken.getSecret(), it may be null.\r\n// 2. your IPs: comma-separated list of one or more IPs.\r\n//    You can use the 127.0.0.1 loopback address during testing.\r\nInstagram instagram = new Instagram(accessToken.getToken(), \"your_client_secret\", \"your_IPs\");\r\n```\r\n\r\n###Sample Projects\r\n* [Basic Web Application](https://github.com/sachin-handiekar/jInstagram-examples) - A basic web application demonstrating the use of jInstagram API.\r\n\t    \r\n##Instagram API Endpoints \r\n\r\nPlease see the [API Usage](https://github.com/sachin-handiekar/jInstagram/wiki/jInstagram-Usage) for more details.\r\n\r\n##Instagram Embedding Endpoints\r\n\r\n```java\r\nInstagramOembed oembed = new InstagramOembed();\r\nOembedInformation info = oembed.getOembedInformation(\"http://instagram.com/p/BUG/\");\r\n```\r\n\r\n##Maven\r\n```xml\r\n<dependency>\r\n   <groupId>com.sachinhandiekar</groupId>\r\n   <artifactId>jInstagram</artifactId>\r\n   <version>1.0.8</version>\r\n</dependency>\r\n```\r\n\r\n##Dependencies\r\n\r\n* Google GSON (http://code.google.com/p/google-gson/)\r\n\r\n##About me\r\n\r\n* [LinkedIn](http://uk.linkedin.com/in/sachinhandiekar)\r\n* Email   : sachin.handiekar at gmail.com / sach21 at gmail.com\r\n* Twitter : [@sachinhandiekar](http://twitter.com/sachinhandiekar)\r\n","google":"UA-53610168-1","note":"Don't delete this file! It's used internally to help with page regeneration."}